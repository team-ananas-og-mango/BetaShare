<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Producer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1000</stringProp>
        </LoopController>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap.servers" elementType="Argument">
                <stringProp name="Argument.name">bootstrap.servers</stringProp>
                <stringProp name="Argument.value">35.228.95.11:9094</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zookeeper.servers" elementType="Argument">
                <stringProp name="Argument.name">zookeeper.servers</stringProp>
                <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka.topic.name" elementType="Argument">
                <stringProp name="Argument.name">kafka.topic.name</stringProp>
                <stringProp name="Argument.value">xcse</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="key.serializer" elementType="Argument">
                <stringProp name="Argument.name">key.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="value.serializer" elementType="Argument">
                <stringProp name="Argument.name">value.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="compression.type" elementType="Argument">
                <stringProp name="Argument.name">compression.type</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batch.size" elementType="Argument">
                <stringProp name="Argument.name">batch.size</stringProp>
                <stringProp name="Argument.value">16384</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="linger.ms" elementType="Argument">
                <stringProp name="Argument.name">linger.ms</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="buffer.memory" elementType="Argument">
                <stringProp name="Argument.name">buffer.memory</stringProp>
                <stringProp name="Argument.value">33554432</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                <stringProp name="Argument.value">131072</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="receive.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                <stringProp name="Argument.value">32768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="security.protocol" elementType="Argument">
                <stringProp name="Argument.name">security.protocol</stringProp>
                <stringProp name="Argument.value">PLAINTEXT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.placeholder.key" elementType="Argument">
                <stringProp name="Argument.name">message.placeholder.key</stringProp>
                <stringProp name="Argument.value">MESSAGE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kerberos.auth.enabled" elementType="Argument">
                <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.auth.login.config" elementType="Argument">
                <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.krb5.conf" elementType="Argument">
                <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                <stringProp name="Argument.value">kafka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
        </JavaSampler>
        <hashTree/>
        <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
          <stringProp name="jsonSchema">{
	&quot;Symbol&quot;: &quot;{{RANDOM_STRING(&quot;ONE&quot;,&quot;TWO&quot;,&quot;THREE&quot;,&quot;FOUR&quot;, &quot;FIVE&quot;, &quot;SIX&quot;, &quot;SEVEN&quot;, &quot;EIGHT&quot;, &quot;NINE&quot;, &quot;TEN&quot;, &quot;ELEVEN&quot;, &quot;TWELVE&quot;, &quot;THIRTEEN&quot;, &quot;FOURTEEN&quot;)}}&quot;,
	&quot;Time&quot;: {{TIMESTAMP()}},
	&quot;Close&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;High&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Interest&quot;: 0,
	&quot;Low&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Open&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Volume&quot;: {{RANDOM_INT(1, 2, 3, 4)}}
}</stringProp>
          <stringProp name="placeHolder">MESSAGE</stringProp>
        </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
        <hashTree/>
        <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="false">
          <stringProp name="jsonSchema">{
	&quot;Symbol&quot;: &quot;NOVO&quot;,
	&quot;Time&quot;: {{TIMESTAMP()}},
	&quot;Close&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;High&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Interest&quot;: 0,
	&quot;Low&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Open&quot;: {{RANDOM_DOUBLE(1.1, 2.1, 3.1, 4.1)}},
	&quot;Volume&quot;: {{RANDOM_INT(1, 2, 3, 4)}}
}</stringProp>
          <stringProp name="placeHolder">MESSAGE</stringProp>
        </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Kafka producer" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.clients.producer.KafkaProducer
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.common.serialization.StringSerializer
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.URL
import java.util.Properties
import groovy.time.*
import groovy.json.JsonBuilder
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

// Kafka producer configuration
def kafkaServers = &quot;34.88.11.32:9094&quot; // Update with your Kafka broker address
def kafkaTopic = &quot;xcse&quot; // Update with your Kafka topic name
def maxMessages = 10000

// Local CSV file paths
def csvFilePaths = [
    &quot;/Users/madsfalken/Documents/GitHub/BetaShare/120071-ETR.csv&quot;
]

// Kafka producer properties
def props = new Properties()
props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServers)
props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())
props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName())

// Counter variables for metrics
def successCount = 0
def failureCount = 0

// Create Kafka producer
def producer = new KafkaProducer&lt;String, String&gt;(props)
def messageCount = 0
try {
    for (String csvFilePath : csvFilePaths) {
        BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))
        String line
        boolean skipHeader = true
        while ((line = reader.readLine()) != null) {
            if (line.startsWith(&quot;#&quot;)) {
                continue // Skip the comments
            }
            if (skipHeader) {
            	skipHeader = false
            	continue // Skip the header line
            }
            // Split the CSV line into fields
            def fields = line.split(&apos;,&apos;)

            // Check if the fields array has enough elements
            if (fields.length &lt;= 25) {
                continue // Skip the line if it doesn&apos;t have enough elements
            }

            // Extract the required fields based on the new schema
            def symbol = fields[0].trim()
            def date = fields[2].trim()
            def time = fields[3].trim()
            def close = fields[10].trim()
            def high = fields[13].trim()
            def interest = &quot;&quot; // No corresponding field in the CSV file
            def low = fields[17].trim()
            def open = fields[19].trim()
            def volume = fields[25].trim()

            // Check if any of the fields are empty
            if (symbol.isEmpty() || date.isEmpty() || time.isEmpty() || close.isEmpty() || high.isEmpty() || low.isEmpty() || open.isEmpty() || volume.isEmpty()) {
                failureCount++ // Increment failure count
                continue // Skip the line if any field is empty
            }

            // Combine date and time
		  def dateTimeString = &quot;${date} ${time}&quot;

		  // Create a LocalDateTime object from the combined date and time string
		  def dateTime = LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(&quot;dd-MM-yyyy HH:mm:ss.SSS&quot;))
			
		  // Format the LocalDateTime object as desired
		  def formattedDateTimeString = dateTime.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;))


            // Create the Kafka record using the JSON string
            def jsonString = new groovy.json.JsonBuilder(
                Symbol: &quot;GN&quot;,
                Time: formattedDateTimeString,
                Close: close.toDouble(),
                High: high.toDouble(),
                Interest: 0,
                Low: low.toDouble(),
                Open: open.toDouble(),
                Volume: volume.toDouble()
            ).toString()
            def record = new ProducerRecord&lt;&gt;(kafkaTopic, null, jsonString)
            producer.send(record)
            successCount++ // Increment success count
        }
        // Close the reader
        reader.close()
    }
} catch (Exception e) {
    log.error(&quot;Failed to read and process CSV file: &quot; + e.getMessage())
    throw e
}
// Set success and failure counts as JMeter variables
vars.put(&quot;successCount&quot;, successCount.toString())
vars.put(&quot;failureCount&quot;, failureCount.toString())

// Close the Kafka producer
producer.close()
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/madsfalken/Documents/GitHub/BetaShare/no-gui/log.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/madsfalken/Documents/GitHub/BetaShare/no-gui/log.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/madsfalken/Documents/GitHub/BetaShare/no-gui/log-2.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/madsfalken/Documents/GitHub/BetaShare/no-gui/log-best.jtl</stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Producer2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap.servers" elementType="Argument">
                <stringProp name="Argument.name">bootstrap.servers</stringProp>
                <stringProp name="Argument.value">34.88.11.32:9094</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zookeeper.servers" elementType="Argument">
                <stringProp name="Argument.name">zookeeper.servers</stringProp>
                <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka.topic.name" elementType="Argument">
                <stringProp name="Argument.name">kafka.topic.name</stringProp>
                <stringProp name="Argument.value">xcse</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="key.serializer" elementType="Argument">
                <stringProp name="Argument.name">key.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="value.serializer" elementType="Argument">
                <stringProp name="Argument.name">value.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="compression.type" elementType="Argument">
                <stringProp name="Argument.name">compression.type</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batch.size" elementType="Argument">
                <stringProp name="Argument.name">batch.size</stringProp>
                <stringProp name="Argument.value">16384</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="linger.ms" elementType="Argument">
                <stringProp name="Argument.name">linger.ms</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="buffer.memory" elementType="Argument">
                <stringProp name="Argument.name">buffer.memory</stringProp>
                <stringProp name="Argument.value">33554432</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                <stringProp name="Argument.value">131072</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="receive.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                <stringProp name="Argument.value">32768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="security.protocol" elementType="Argument">
                <stringProp name="Argument.name">security.protocol</stringProp>
                <stringProp name="Argument.value">PLAINTEXT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.placeholder.key" elementType="Argument">
                <stringProp name="Argument.name">message.placeholder.key</stringProp>
                <stringProp name="Argument.value">MESSAGE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kerberos.auth.enabled" elementType="Argument">
                <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.auth.login.config" elementType="Argument">
                <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.krb5.conf" elementType="Argument">
                <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                <stringProp name="Argument.value">kafka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
        </JavaSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1000</stringProp>
        </LoopController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Consumer" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Kafka consumer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration

// Kafka consumer configuration
def kafkaServers = &quot;localhost:9092&quot; // Update with your Kafka broker address
def kafkaTopic = &quot;ema&quot; // Update with your Kafka topic name
def kafkaGroup = &quot;jmeter-consumer-group&quot; // Update with a consumer group name
def maxMessages = 20 //480 // Maximum number of messages to consume
def successCount = vars.get(&quot;successCount&quot;) as int

// Kafka consumer properties
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServers)
props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaGroup)
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

// Subscribe to the Kafka topic
consumer.subscribe(Arrays.asList(kafkaTopic))

// Enable JMeter logging
def log = org.apache.logging.log4j.LogManager.getLogger(&quot;jmeter&quot;)

// Continuously poll for new messages until the maximum number of messages is consumed
def messageCount = 0
while (messageCount &lt;= successCount) {
    def records = consumer.poll(Duration.ofMillis(100))
    
    // Process received records
    for (ConsumerRecord&lt;String, String&gt; record : records) {
        def key = record.key()
        def value = record.value()
        
        // Process the received message (e.g., print it)
        log.info(&quot;Received message - Key: $key, Value: $value&quot;)
        
        // Log the required fields
        SampleResult.setResponseData(&quot;Received message - Key: $key, Value: $value&quot;, &quot;UTF-8&quot;)
        SampleResult.setDataType(SampleResult.TEXT)
        SampleResult.setSuccessful(true)
        
        // Commit the consumed records
        consumer.commitSync()

        // Increment the message count
        messageCount++
    }
}

def failureCount = vars.get(&quot;failureCount&quot;) as int
// Calculate throughput in requests per second (RPS)
def totalRequests = successCount + failureCount
def testDuration = Long.parseLong(props.get(&quot;endTime&quot;)) - Long.parseLong(props.get(&quot;startTime&quot;))
def throughput = totalRequests / (testDuration / 1000.0)
props.put(&quot;successCount&quot;, successCount.toString())
props.put(&quot;failureCount&quot;, failureCount.toString())
props.put(&quot;throughput&quot;, throughput.toString())

// Close the Kafka consumer (unreachable code in this script)
consumer.close()</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/Users/madsfalken/Documents/GitHub/BetaShare/results.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Kafka consumer" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.serialization.StringDeserializer
import java.time.Duration
import org.apache.jmeter.samplers.SampleResult
def sampleResult = new SampleResult()
//vars.put(&quot;startTime&quot;, String.valueOf(System.currentTimeMillis()))

// Kafka consumer configuration
def kafkaServers = &quot;35.228.175.18:9094&quot; // Update with your Kafka broker address
def kafkaTopic = &quot;ema&quot; // Update with your Kafka topic name
def kafkaGroup = &quot;jmeter-consume-no-gui&quot; // Update with a consumer group name
def successCount = 10000// vars.get(&quot;successCount&quot;) as int
 
// Kafka consumer properties
def props = new Properties()
props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServers)
props.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaGroup)
props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName())
props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;) // Set the offset to &apos;earliest&apos;

// Create Kafka consumer
def consumer = new KafkaConsumer&lt;&gt;(props)

// Subscribe to the Kafka topic
consumer.subscribe(Arrays.asList(kafkaTopic))

// Continuously poll for new messages until the maximum number of messages is consumed
def messageCount = 0
while (messageCount &lt; successCount) {
	def records = consumer.poll(Duration.ofMillis(0))
	
	// Process received records
	for (ConsumerRecord&lt;String, String&gt; record : records) {
	   def key = record.key()
	   def value = record.value()
	   
	   // Log the required fields
	   sampleResult.setResponseData(&quot;Received message - Key: $key, Value: $value&quot;, &quot;UTF-8&quot;)
	   sampleResult.setResponseMessage(&quot;OK&quot;)
	   sampleResult.setDataType(SampleResult.TEXT)
	   sampleResult.setSuccessful(true)
	   
	   // Commit the consumed records
	   consumer.commitSync()
	
	   // Increment the message count
	   messageCount++
	}
}

// Close the Kafka consumer
consumer.close()</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
